from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from openai import OpenAI
import os
import asyncio
from dotenv import load_dotenv

load_dotenv()

app = FastAPI()

# Retrieve OpenAI API key from environment variables
openai_api_key = os.getenv('OPENAI_API_KEY')
if not openai_api_key:
    raise ValueError("Missing OpenAI API key. Set the OPENAI_API_KEY environment variable.")

client = OpenAI(api_key=openai_api_key)

# Define the request model for code optimization input
class OptimizationRequest(BaseModel):
    description: str  # Natural language description of the optimization goal
    code: str         # Original code to be optimized
    language: str     # Programming language of the code

# Function to suggest code optimizations based on natural language description
def suggestCodeOptimizationFromNL(description: str, code: str, language: str) -> str:
    # Construct prompt for code optimization
    prompt = (
        f"Suggest optimizations for the following {language} code based on this goal: {description}.\n"
        f"Original Code:\n{code}\nOptimized Code:"
    )
    
    # Call OpenAI API to generate the optimized code
    response = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "system", "content": "You are an AI assistant that suggests code optimizations based on user goals."},
            {"role": "user", "content": prompt}
        ],
        temperature=0,
        max_tokens=512,
        top_p=1,
        frequency_penalty=0,
        presence_penalty=0
    )

    # Extract the optimized code from the response
    optimized_code = response.choices[0].message.content.strip()
    if not optimized_code:
        raise ValueError("No optimized code was generated by the model.")
    
    return optimized_code

# Define API endpoint to suggest code optimizations
@app.post("/suggest-optimization")
async def suggest_optimization(request: OptimizationRequest):
    # Check if any field is empty
    if not request.description.strip():
        raise HTTPException(status_code=400, detail="Description cannot be empty.")
    if not request.code.strip():
        raise HTTPException(status_code=400, detail="Code cannot be empty.")
    if not request.language.strip():
        raise HTTPException(status_code=400, detail="Language cannot be empty.")
    
    try:
        # Run the code optimization suggestion in a separate thread to avoid blocking
        optimized_code = await asyncio.to_thread(suggestCodeOptimizationFromNL, request.description, request.code, request.language)
        return {"optimized_code": optimized_code}  # Return optimized code as JSON response
    except ValueError as ve:
        raise HTTPException(status_code=500, detail=str(ve))
    except Exception:
        raise HTTPException(status_code=500, detail="An unexpected error occurred.")
